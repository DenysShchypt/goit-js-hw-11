{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,iEAOIC,EAAO,EACLC,GAAO,EAAAC,EAAAC,WAIPC,EAAW,IAAIC,sBA2FrB,SAA2BC,GAEvB,IAAMC,EAAsBC,aAAaC,QAAQ,SACjDH,EAAQI,S,EAAQC,EAAAb,EAAA,CAAAa,EAAAC,GAAAC,MAAA,SAAAC,EAAMC,G,sEACdA,EAAMC,eAAc,C,uBACpBhB,GAAQ,E,mBAEgB,EAAAiB,EAAAC,eAAcX,EAAqBP,G,OACvDmB,EADWC,EAAAC,M,gDAGXC,QAAQC,IAAGH,EAAAI,I,kEAPDT,G,kCAAP,I,IAjGH,CACZU,WAAY,U,SAKDC,I,OAAAA,EAAff,EAAAb,EAAA,CAAAa,EAAAC,GAAAC,MAAA,SAAAC,EAAgCa,G,IAGtBC,E,qEAFND,EAAIE,iBACJ7B,EAAO,EAEY,MADb4B,EAAaD,EAAIG,cAAcC,SAASC,YAAYC,MAAMC,QAC3C,C,wCACVC,EAAAC,OAAOC,QAAQ,6E,iCAGF,EAAApB,EAAAC,eAAcU,EAAY5B,G,OAC9CsC,EADWlB,EAAAC,M,kDAGXC,QAAQC,IAAGH,EAAAI,I,QAEfhB,aAAa+B,QAAQ,QAASX,G,2DAbHY,MAAAC,KAAAC,U,CAiB/B,SAASJ,EAAWK,GAEhB,IAAMC,EAAaC,EAAiBF,EAAIG,MACxC7C,EAAK8C,QAAQC,UAAYJ,EACzB,IAAMK,EAAgBN,EAAIG,KAAKI,WA2BnC,SAAwBC,EAAcF,GAEZ,IAAlBA,GACAd,EAAAC,OAAOgB,QAAQ,oBAAkCC,OAAdJ,EAAc,aAE/B,IAAlBA,EACAd,EAAAC,OAAOC,QAAQ,4EACRY,EAAgB,IAAuB,IAAjBE,EAC7BG,YAAW,WACPnB,EAAAC,OAAOmB,KAAK,6D,GACb,KAEEJ,EAAe,GACpB/C,EAASoD,QAAQvD,EAAKwD,M,CAtC1BC,CADqBC,KAAKC,KAAKX,EAAgB,IAClBA,GAC7BY,IAyDA5D,EAAK8C,QAAQe,kBAAkBC,wBAC/BC,OAAOC,SAAS,CACZC,IAAK,GACLC,SAAU,U,CAvDlB,SAAStB,EAAiBuB,GAEtB,OAAOA,EAAKC,KAAKC,KAAI,SAAAC,G,IAAGC,EAAYD,EAAZC,aAAcC,EAAaF,EAAbE,cAAeC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,UAE/E,MAAO,oEAEIzB,OADsBoB,EAAc,yBACdpB,OAAtBmB,EAAa,WAGSnB,OAHAqB,EAAK,2HAILrB,OADAsB,EAAM,qDAEHtB,OADHuB,EAAM,wDAEFvB,OADDwB,EAAS,yDACExB,OAAVyB,EAAU,uC,IAGjDC,KAAK,G,CAsBX,SAASlB,IAEY,IAAIlD,EAAAqE,GAAJ,CAAmB,aAChC,CACIC,KAAK,EACLC,aAAc,MACdC,gBAAiB,SACjBC,aAAc,MAEbC,S,CA8Bb,SAASlE,EAAgBwB,GAErB,IAAMC,EAAaC,EAAiBF,EAAIG,MACxC7C,EAAK8C,QAAQuC,mBAAmB,YAAa1C,GAC7C,IAAMK,EAAgBN,EAAIG,KAAKI,UACzBC,EAAeQ,KAAKC,KAAKX,EAAgB,KAMnD,SAA+BsC,EAAOpC,GAE9BA,IAAiBoC,GACjBpD,EAAAC,OAAOmB,KAAK,6DAA8D,CACtEiC,QAAS,K,CATjBC,CAAsBzF,EAAMmD,GAC5BU,IAgBI7D,GAAQ,IACRI,EAASsF,UAAUzF,EAAKwD,M,CAnIhCxD,EAAK0F,KAAKC,iBAAiB,U,SAEKjE,G,OAAjBD,EAAgBc,MAAAC,KAAAC,U","sources":["src/js/scroll.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nimport { fetchCategory } from './api';\nimport getRefs from './get-refs';\n\nlet page = 0;\nconst refs = getRefs();\nconst options = {\n    rootMargin: \"300px\",\n};\nconst observer = new IntersectionObserver(handlerLoadScroll, options);\nrefs.form.addEventListener('submit', handlerValueForm);\n\nasync function handlerValueForm(evt) {\n    evt.preventDefault();\n    page = 1;\n    const inputValue = evt.currentTarget.elements.searchQuery.value.trim();\n    if (inputValue === '') {\n        return Notify.warning(\"Sorry, there are no images matching your search query. Please try again.\");\n    };\n    try {\n        const cards = await fetchCategory(inputValue, page);\n        renderCard(cards);\n    } catch (error) {\n        console.log(error);\n    };\n    localStorage.setItem(\"input\", inputValue);\n\n};\n\nfunction renderCard(res) {\n\n    const markupCard = createMarkupCard(res.data);\n    refs.gallery.innerHTML = markupCard;\n    const quantityPhoto = res.data.totalHits;\n    const quantityPage = Math.ceil(quantityPhoto / 40);\n    checkZeroArray(quantityPage, quantityPhoto);\n    createBigImg();\n    smoothScrollingOnePage();\n\n};\n\nfunction createMarkupCard(card) {\n\n    return card.hits.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {\n\n        return `<div class=\"photo-card\">\n        <a class=\"gallery__link\" href=\"${largeImageURL}\">\n       <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" class=\"gallery-img\"/>\n       </a>\n       <div class=\"info\">\n         <p class=\"info-item\"><b>Likes ${likes}</b></p>\n         <p class=\"info-item\"><b>Views ${views}</b></p>\n         <p class=\"info-item\"><b>Comments ${comments}</b></p>\n         <p class=\"info-item\"><b>Downloads ${downloads}</b></p>\n       </div>\n     </div>`}\n    ).join('');\n\n};\n\nfunction checkZeroArray(quantityPage, quantityPhoto) {\n\n    if (quantityPhoto !== 0) {\n        Notify.success(`Hooray! We found ${quantityPhoto} images.`);\n    };\n    if (quantityPhoto === 0) {\n        Notify.warning(\"Sorry, there are no images matching your search query. Please try again.\");\n    } else if (quantityPhoto < 40 && quantityPage === 1) {\n        setTimeout(() => {\n            Notify.info(\"We're sorry, but you've reached the end of search results.\")\n        }, 4000);\n    }\n    else if (quantityPage > 1) {\n        observer.observe(refs.guard)\n    };\n\n};\n\nfunction createBigImg() {\n\n    const lightbox = new SimpleLightbox('.gallery a',\n        {\n            nav: true,\n            captionsData: 'alt',\n            captionPosition: 'bottom',\n            captionDelay: 250,\n        });\n    lightbox.refresh();\n\n};\n\nfunction smoothScrollingOnePage() {\n\n    refs.gallery.firstElementChild.getBoundingClientRect();\n    window.scrollBy({\n        top: 90,\n        behavior: 'smooth',\n    });\n};\n\nfunction handlerLoadScroll(entries) {\n\n    const getRecordInputValue = localStorage.getItem(\"input\");\n    entries.forEach(async entry => {\n        if (entry.isIntersecting) {\n            page += 1;\n            try {\n                const cards = await fetchCategory(getRecordInputValue, page);\n                renderNextCards(cards);\n            } catch (error) {\n                console.log(error);\n            };\n        }\n    });\n\n};\n\nfunction renderNextCards(res) {\n\n    const markupCard = createMarkupCard(res.data);\n    refs.gallery.insertAdjacentHTML('beforeend', markupCard);\n    const quantityPhoto = res.data.totalHits;\n    const quantityPage = Math.ceil(quantityPhoto / 40);\n    auditMaxQuantityPhoto(page, quantityPage)\n    createBigImg();\n    removeScrolling();\n};\n\nfunction auditMaxQuantityPhoto(pages, quantityPage) {\n\n    if (quantityPage === pages) {\n        Notify.info(\"We're sorry, but you've reached the end of search results.\", {\n            timeout: 5000,\n        },)\n    };\n\n};\n\nfunction removeScrolling() {\n\n    if (page >= 13) {\n        observer.unobserve(refs.guard)\n    };\n\n};\n"],"names":["$bpxeT","parcelRequire","$dd9e54e108f59881$var$page","$dd9e54e108f59881$var$refs","$3vKGz","default","$dd9e54e108f59881$var$observer","IntersectionObserver","entries","getRecordInputValue","localStorage","getItem","forEach","$parcel$interopDefault","$2TvXO","mark","_callee","entry","isIntersecting","$b7ONl","fetchCategory","$dd9e54e108f59881$var$renderNextCards","_ctx","sent","console","log","t0","rootMargin","$dd9e54e108f59881$var$_handlerValueForm","evt","inputValue","preventDefault","currentTarget","elements","searchQuery","value","trim","$h6c0i","Notify","warning","$dd9e54e108f59881$var$renderCard","setItem","apply","this","arguments","res","markupCard","$dd9e54e108f59881$var$createMarkupCard","data","gallery","innerHTML","quantityPhoto","totalHits","quantityPage","success","concat","setTimeout","info","observe","guard","$dd9e54e108f59881$var$checkZeroArray","Math","ceil","$dd9e54e108f59881$var$createBigImg","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","card","hits","map","param","webformatURL","largeImageURL","tags","likes","views","comments","downloads","join","$5IjG7","nav","captionsData","captionPosition","captionDelay","refresh","insertAdjacentHTML","pages","timeout","$dd9e54e108f59881$var$auditMaxQuantityPhoto","unobserve","form","addEventListener"],"version":3,"file":"scroll.2967957b.js.map"}