{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,uCAOA,IAAIC,EAAO,EACX,MAAMC,GAAO,EAAAC,EAAAC,WAIPC,EAAW,IAAIC,sBA2FrB,SAA2BC,GAEvB,MAAMC,EAAsBC,aAAaC,QAAQ,SACjDH,EAAQI,SAAQC,MAAMC,IAClB,GAAIA,EAAMC,eAAgB,CACtBb,GAAQ,EACR,KAWZ,SAAyBc,GAErB,MAAMC,EAAaC,EAAiBF,EAAIG,MACxChB,EAAKiB,QAAQC,mBAAmB,YAAaJ,GAC7C,MAAMK,EAAgBN,EAAIG,KAAKI,UACzBC,EAAeC,KAAKC,KAAKJ,EAAgB,KAMnD,SAA+BK,EAAOH,GAE9BA,IAAiBG,GACjB3B,EAAA4B,OAAOC,KAAK,6DAA8D,CACtEC,QAAS,K,EATjBC,CAAsB7B,EAAMsB,GAC5BQ,IAgBI9B,GAAQ,IACRI,EAAS2B,UAAU9B,EAAK+B,M,CAjChBC,OADoB,EAAAC,EAAAC,eAAc5B,EAAqBP,G,CAEzD,MAAOoC,GACLC,QAAQC,IAAIF,E,QAxGZ,CACZG,WAAY,UAkChB,SAASvB,EAAiBwB,GAEtB,OAAOA,EAAKC,KAAKC,KAAI,EAACC,aAAEA,EAAYC,cAAEA,EAAaC,KAAEA,EAAIC,MAAEA,EAAKC,MAAEA,EAAKC,SAAEA,EAAQC,UAAEA,KAExE,oEAC0BL,yBACtBD,WAAsBE,2HAGAC,qDACAC,wDACGC,yDACCC,0CAGvCC,KAAK,G,CAsBX,SAASpB,IAEY,IAAIqB,EAAAC,GAAJ,CAAmB,aAChC,CACIC,KAAK,EACLC,aAAc,MACdC,gBAAiB,SACjBC,aAAc,MAEbC,S,CA7EbxD,EAAKyD,KAAKC,iBAAiB,UAE3BhD,eAAgCiD,GAC5BA,EAAIC,iBACJ7D,EAAO,EACP,MAAM8D,EAAaF,EAAIG,cAAcC,SAASC,YAAYC,MAAMC,OAChE,GAAmB,KAAfL,EACA,OAAOhE,EAAA4B,OAAO0C,QAAQ,4EAE1B,KAUJ,SAAoBtD,GAEhB,MAAMC,EAAaC,EAAiBF,EAAIG,MACxChB,EAAKiB,QAAQmD,UAAYtD,EACzB,MAAMK,EAAgBN,EAAIG,KAAKI,WA2BnC,SAAwBC,EAAcF,GAEZ,IAAlBA,GACAtB,EAAA4B,OAAO4C,QAAQ,oBAAoBlD,aAEjB,IAAlBA,EACAtB,EAAA4B,OAAO0C,QAAQ,4EACRhD,EAAgB,IAAuB,IAAjBE,EAC7BiD,YAAW,KACPzE,EAAA4B,OAAOC,KAAK,6DAA6D,GAC1E,KAEEL,EAAe,GACpBlB,EAASoE,QAAQvE,EAAK+B,M,EAtC1ByC,CADqBlD,KAAKC,KAAKJ,EAAgB,IAClBA,GAC7BU,IAyDA7B,EAAKiB,QAAQwD,kBAAkBC,wBAC/BC,OAAOC,SAAS,CACZC,IAAK,GACLC,SAAU,U,CA3EVC,OADoB,EAAA9C,EAAAC,eAAc2B,EAAY9D,G,CAEhD,MAAOoC,GACLC,QAAQC,IAAIF,E,CAEhB5B,aAAayE,QAAQ,QAASnB,E","sources":["src/js/scroll.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nimport { fetchCategory } from './api';\nimport getRefs from './get-refs';\n\nlet page = 0;\nconst refs = getRefs();\nconst options = {\n    rootMargin: \"300px\",\n};\nconst observer = new IntersectionObserver(handlerLoadScroll, options);\nrefs.form.addEventListener('submit', handlerValueForm);\n\nasync function handlerValueForm(evt) {\n    evt.preventDefault();\n    page = 1;\n    const inputValue = evt.currentTarget.elements.searchQuery.value.trim();\n    if (inputValue === '') {\n        return Notify.warning(\"Sorry, there are no images matching your search query. Please try again.\");\n    };\n    try {\n        const cards = await fetchCategory(inputValue, page);\n        renderCard(cards);\n    } catch (error) {\n        console.log(error);\n    };\n    localStorage.setItem(\"input\", inputValue);\n\n};\n\nfunction renderCard(res) {\n\n    const markupCard = createMarkupCard(res.data);\n    refs.gallery.innerHTML = markupCard;\n    const quantityPhoto = res.data.totalHits;\n    const quantityPage = Math.ceil(quantityPhoto / 40);\n    checkZeroArray(quantityPage, quantityPhoto);\n    createBigImg();\n    smoothScrollingOnePage();\n\n};\n\nfunction createMarkupCard(card) {\n\n    return card.hits.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {\n\n        return `<div class=\"photo-card\">\n        <a class=\"gallery__link\" href=\"${largeImageURL}\">\n       <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" class=\"gallery-img\"/>\n       </a>\n       <div class=\"info\">\n         <p class=\"info-item\"><b>Likes ${likes}</b></p>\n         <p class=\"info-item\"><b>Views ${views}</b></p>\n         <p class=\"info-item\"><b>Comments ${comments}</b></p>\n         <p class=\"info-item\"><b>Downloads ${downloads}</b></p>\n       </div>\n     </div>`}\n    ).join('');\n\n};\n\nfunction checkZeroArray(quantityPage, quantityPhoto) {\n\n    if (quantityPhoto !== 0) {\n        Notify.success(`Hooray! We found ${quantityPhoto} images.`);\n    };\n    if (quantityPhoto === 0) {\n        Notify.warning(\"Sorry, there are no images matching your search query. Please try again.\");\n    } else if (quantityPhoto < 40 && quantityPage === 1) {\n        setTimeout(() => {\n            Notify.info(\"We're sorry, but you've reached the end of search results.\")\n        }, 4000);\n    }\n    else if (quantityPage > 1) {\n        observer.observe(refs.guard)\n    };\n\n};\n\nfunction createBigImg() {\n\n    const lightbox = new SimpleLightbox('.gallery a',\n        {\n            nav: true,\n            captionsData: 'alt',\n            captionPosition: 'bottom',\n            captionDelay: 250,\n        });\n    lightbox.refresh();\n\n};\n\nfunction smoothScrollingOnePage() {\n\n    refs.gallery.firstElementChild.getBoundingClientRect();\n    window.scrollBy({\n        top: 90,\n        behavior: 'smooth',\n    });\n};\n\nfunction handlerLoadScroll(entries) {\n\n    const getRecordInputValue = localStorage.getItem(\"input\");\n    entries.forEach(async entry => {\n        if (entry.isIntersecting) {\n            page += 1;\n            try {\n                const cards = await fetchCategory(getRecordInputValue, page);\n                renderNextCards(cards);\n            } catch (error) {\n                console.log(error);\n            };\n        }\n    });\n\n};\n\nfunction renderNextCards(res) {\n\n    const markupCard = createMarkupCard(res.data);\n    refs.gallery.insertAdjacentHTML('beforeend', markupCard);\n    const quantityPhoto = res.data.totalHits;\n    const quantityPage = Math.ceil(quantityPhoto / 40);\n    auditMaxQuantityPhoto(page, quantityPage)\n    createBigImg();\n    removeScrolling();\n};\n\nfunction auditMaxQuantityPhoto(pages, quantityPage) {\n\n    if (quantityPage === pages) {\n        Notify.info(\"We're sorry, but you've reached the end of search results.\", {\n            timeout: 5000,\n        },)\n    };\n\n};\n\nfunction removeScrolling() {\n\n    if (page >= 13) {\n        observer.unobserve(refs.guard)\n    };\n\n};\n"],"names":["$iQIUW","parcelRequire","$22b277e67ad1df42$var$page","$22b277e67ad1df42$var$refs","$lpPzL","default","$22b277e67ad1df42$var$observer","IntersectionObserver","entries","getRecordInputValue","localStorage","getItem","forEach","async","entry","isIntersecting","res","markupCard","$22b277e67ad1df42$var$createMarkupCard","data","gallery","insertAdjacentHTML","quantityPhoto","totalHits","quantityPage","Math","ceil","pages","Notify","info","timeout","$22b277e67ad1df42$var$auditMaxQuantityPhoto","$22b277e67ad1df42$var$createBigImg","unobserve","guard","$22b277e67ad1df42$var$renderNextCards","$7rYDH","fetchCategory","error","console","log","rootMargin","card","hits","map","webformatURL","largeImageURL","tags","likes","views","comments","downloads","join","$parcel$interopDefault","$fZKcF","nav","captionsData","captionPosition","captionDelay","refresh","form","addEventListener","evt","preventDefault","inputValue","currentTarget","elements","searchQuery","value","trim","warning","innerHTML","success","setTimeout","observe","$22b277e67ad1df42$var$checkZeroArray","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","$22b277e67ad1df42$var$renderCard","setItem"],"version":3,"file":"scroll.fa386f7b.js.map"}