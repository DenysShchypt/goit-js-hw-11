{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,uCAOIC,EAAO,EACLC,GAAO,EAAAC,EAAAC,WAIPC,EAAW,IAAIC,sBAwFrB,SAA2BC,GAEvB,IAAMC,EAAsBC,aAAaC,QAAQ,SACjDH,EAAQI,SAAQ,SAAAC,GACRA,EAAMC,iBACNZ,GAAQ,GACR,EAAAa,EAAAC,eAAcP,EAAqBP,GAAMe,KAAKC,GAAiBC,OAAM,SAAAC,GACjEC,QAAQC,IAAIF,E,UAlGZ,CACZG,WAAY,UAmBhB,SAASC,EAAWC,GAEhB,IAAMC,EAAaC,EAAiBF,EAAIG,MACxCzB,EAAK0B,QAAQC,UAAYJ,EACzB,IAAMK,EAAgBN,EAAIG,KAAKI,WA2BnC,SAAwBC,EAAcF,GAEZ,IAAlBA,GACA/B,EAAAkC,OAAOC,QAAQ,oBAAkCC,OAAdL,EAAc,aAE/B,IAAlBA,EACA/B,EAAAkC,OAAOG,QAAQ,4EACRN,EAAgB,IAAuB,IAAjBE,EAC7BK,YAAW,WACPtC,EAAAkC,OAAOK,KAAK,6D,GACb,KAEEN,EAAe,GACpB3B,EAASkC,QAAQrC,EAAKsC,M,CAtC1BC,CADqBC,KAAKC,KAAKb,EAAgB,IAClBA,GAC7Bc,IAyDA1C,EAAK0B,QAAQiB,kBAAkBC,wBAC/BC,OAAOC,SAAS,CACZC,IAAK,GACLC,SAAU,U,CAvDlB,SAASxB,EAAiByB,GAEtB,OAAOA,EAAKC,KAAKC,KAAI,SAAAC,G,IAAGC,EAAYD,EAAZC,aAAcC,EAAaF,EAAbE,cAAeC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,UAE/E,MAAO,oEAEI1B,OADsBqB,EAAc,yBACdrB,OAAtBoB,EAAa,WAGSpB,OAHAsB,EAAK,2HAILtB,OADAuB,EAAM,qDAEHvB,OADHwB,EAAM,wDAEFxB,OADDyB,EAAS,yDACEzB,OAAV0B,EAAU,uC,IAGjDC,KAAK,G,CAsBX,SAASlB,IAEY,IAAImB,EAAAC,GAAJ,CAAmB,aAChC,CACIC,KAAK,EACLC,aAAc,MACdC,gBAAiB,SACjBC,aAAc,MAEbC,S,CA2Bb,SAASpD,EAAgBO,GAErB,IAAMC,EAAaC,EAAiBF,EAAIG,MACxCzB,EAAK0B,QAAQ0C,mBAAmB,YAAa7C,GAC7C,IAAMK,EAAgBN,EAAIG,KAAKI,UACzBC,EAAeU,KAAKC,KAAKb,EAAgB,KAMnD,SAA+ByC,EAAOvC,GAE9BA,IAAiBuC,GACjBxE,EAAAkC,OAAOK,KAAK,6DAA8D,CACtEkC,QAAS,K,CATjBC,CAAsBxE,EAAM+B,GAC5BY,IAgBI3C,GAAQ,IACRI,EAASqE,UAAUxE,EAAKsC,M,CA7HhCtC,EAAKyE,KAAKC,iBAAiB,UAE3B,SAA0BC,GACtBA,EAAIC,iBACJ7E,EAAO,EACP,IAAM8E,EAAaF,EAAIG,cAAcC,SAASC,YAAYC,MAAMC,OAChE,GAAmB,KAAfL,EACA,OAAOhF,EAAAkC,OAAOG,QAAQ,6EAE1B,EAAAtB,EAAAC,eAAcgE,EAAW9E,GAAMe,KAAKO,GAAYL,OAAM,SAAAC,GAClDC,QAAQC,IAAIF,E,IAEhBV,aAAa4E,QAAQ,QAASN,E","sources":["src/js/scroll.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\nimport { fetchCategory } from './api';\nimport getRefs from './get-refs';\n\nlet page = 0;\nconst refs = getRefs();\nconst options = {\n    rootMargin: \"300px\",\n};\nconst observer = new IntersectionObserver(handlerLoadScroll, options);\nrefs.form.addEventListener('submit', handlerValueForm);\n\nfunction handlerValueForm(evt) {\n    evt.preventDefault();\n    page = 1;\n    const inputValue = evt.currentTarget.elements.searchQuery.value.trim();\n    if (inputValue === '') {\n        return Notify.warning(\"Sorry, there are no images matching your search query. Please try again.\");\n    };\n    fetchCategory(inputValue,page).then(renderCard).catch(error => {\n        console.log(error);\n    });\n    localStorage.setItem(\"input\", inputValue);\n\n};\n\nfunction renderCard(res) {\n\n    const markupCard = createMarkupCard(res.data);\n    refs.gallery.innerHTML = markupCard;\n    const quantityPhoto = res.data.totalHits;\n    const quantityPage = Math.ceil(quantityPhoto / 40);\n    checkZeroArray(quantityPage, quantityPhoto);\n    createBigImg();\n    smoothScrollingOnePage();\n\n};\n\nfunction createMarkupCard(card) {\n\n    return card.hits.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {\n\n        return `<div class=\"photo-card\">\n        <a class=\"gallery__link\" href=\"${largeImageURL}\">\n       <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" class=\"gallery-img\"/>\n       </a>\n       <div class=\"info\">\n         <p class=\"info-item\"><b>Likes ${likes}</b></p>\n         <p class=\"info-item\"><b>Views ${views}</b></p>\n         <p class=\"info-item\"><b>Comments ${comments}</b></p>\n         <p class=\"info-item\"><b>Downloads ${downloads}</b></p>\n       </div>\n     </div>`}\n    ).join('');\n\n};\n\nfunction checkZeroArray(quantityPage, quantityPhoto) {\n\n    if (quantityPhoto !== 0) {\n        Notify.success(`Hooray! We found ${quantityPhoto} images.`);\n    };\n    if (quantityPhoto === 0) {\n        Notify.warning(\"Sorry, there are no images matching your search query. Please try again.\");\n    } else if (quantityPhoto < 40 && quantityPage === 1) {\n        setTimeout(() => {\n            Notify.info(\"We're sorry, but you've reached the end of search results.\")\n        }, 4000);\n    }\n    else if (quantityPage > 1) {\n        observer.observe(refs.guard)\n    };\n\n};\n\nfunction createBigImg() {\n\n    const lightbox = new SimpleLightbox('.gallery a',\n        {\n            nav: true,\n            captionsData: 'alt',\n            captionPosition: 'bottom',\n            captionDelay: 250,\n        });\n    lightbox.refresh();\n\n};\n\nfunction smoothScrollingOnePage() {\n\n    refs.gallery.firstElementChild.getBoundingClientRect();\n    window.scrollBy({\n        top: 90,\n        behavior: 'smooth',\n    });\n};\n\nfunction handlerLoadScroll(entries) {\n\n    const getRecordInputValue = localStorage.getItem(\"input\");\n    entries.forEach(entry => {\n        if (entry.isIntersecting) {\n            page += 1;\n            fetchCategory(getRecordInputValue, page).then(renderNextCards).catch(error => {\n                console.log(error);\n            });\n        }\n    });\n\n};\n\nfunction renderNextCards(res) {\n\n    const markupCard = createMarkupCard(res.data);\n    refs.gallery.insertAdjacentHTML('beforeend', markupCard);\n    const quantityPhoto = res.data.totalHits;\n    const quantityPage = Math.ceil(quantityPhoto / 40);\n    auditMaxQuantityPhoto(page, quantityPage)\n    createBigImg();\n    removeScrolling();\n};\n\nfunction auditMaxQuantityPhoto(pages, quantityPage) {\n\n    if (quantityPage === pages) {\n        Notify.info(\"We're sorry, but you've reached the end of search results.\", {\n            timeout: 5000,\n        },)\n    };\n\n};\n\nfunction removeScrolling() {\n\n    if (page >= 13) {\n        observer.unobserve(refs.guard)\n    };\n\n};\n"],"names":["$h6c0i","parcelRequire","$dd9e54e108f59881$var$page","$dd9e54e108f59881$var$refs","$3vKGz","default","$dd9e54e108f59881$var$observer","IntersectionObserver","entries","getRecordInputValue","localStorage","getItem","forEach","entry","isIntersecting","$b7ONl","fetchCategory","then","$dd9e54e108f59881$var$renderNextCards","catch","error","console","log","rootMargin","$dd9e54e108f59881$var$renderCard","res","markupCard","$dd9e54e108f59881$var$createMarkupCard","data","gallery","innerHTML","quantityPhoto","totalHits","quantityPage","Notify","success","concat","warning","setTimeout","info","observe","guard","$dd9e54e108f59881$var$checkZeroArray","Math","ceil","$dd9e54e108f59881$var$createBigImg","firstElementChild","getBoundingClientRect","window","scrollBy","top","behavior","card","hits","map","param","webformatURL","largeImageURL","tags","likes","views","comments","downloads","join","$parcel$interopDefault","$5IjG7","nav","captionsData","captionPosition","captionDelay","refresh","insertAdjacentHTML","pages","timeout","$dd9e54e108f59881$var$auditMaxQuantityPhoto","unobserve","form","addEventListener","evt","preventDefault","inputValue","currentTarget","elements","searchQuery","value","trim","setItem"],"version":3,"file":"scroll.3703cb7d.js.map"}